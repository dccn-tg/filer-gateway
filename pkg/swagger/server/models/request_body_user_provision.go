// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestBodyUserProvision request body user provision
//
// swagger:model requestBodyUserProvision
type RequestBodyUserProvision struct {

	// storage
	// Required: true
	Storage *StorageRequest `json:"storage"`

	// user ID
	// Required: true
	UserID *UserID `json:"userID"`
}

// Validate validates this request body user provision
func (m *RequestBodyUserProvision) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestBodyUserProvision) validateStorage(formats strfmt.Registry) error {

	if err := validate.Required("storage", "body", m.Storage); err != nil {
		return err
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *RequestBodyUserProvision) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userID", "body", m.UserID); err != nil {
		return err
	}

	if err := validate.Required("userID", "body", m.UserID); err != nil {
		return err
	}

	if m.UserID != nil {
		if err := m.UserID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userID")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this request body user provision based on the context it is used
func (m *RequestBodyUserProvision) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestBodyUserProvision) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.Storage != nil {
		if err := m.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *RequestBodyUserProvision) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if m.UserID != nil {
		if err := m.UserID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userID")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequestBodyUserProvision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestBodyUserProvision) UnmarshalBinary(b []byte) error {
	var res RequestBodyUserProvision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
