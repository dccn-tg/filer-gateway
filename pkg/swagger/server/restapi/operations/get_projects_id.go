// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProjectsIDHandlerFunc turns a function with the right signature into a get projects ID handler
type GetProjectsIDHandlerFunc func(GetProjectsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProjectsIDHandlerFunc) Handle(params GetProjectsIDParams) middleware.Responder {
	return fn(params)
}

// GetProjectsIDHandler interface for that can handle valid get projects ID params
type GetProjectsIDHandler interface {
	Handle(GetProjectsIDParams) middleware.Responder
}

// NewGetProjectsID creates a new http.Handler for the get projects ID operation
func NewGetProjectsID(ctx *middleware.Context, handler GetProjectsIDHandler) *GetProjectsID {
	return &GetProjectsID{Context: ctx, Handler: handler}
}

/*
	GetProjectsID swagger:route GET /projects/{id} getProjectsId

get filer resource for an existing project.
*/
type GetProjectsID struct {
	Context *middleware.Context
	Handler GetProjectsIDHandler
}

func (o *GetProjectsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetProjectsIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
